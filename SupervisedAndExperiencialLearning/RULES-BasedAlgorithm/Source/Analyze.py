from Reader import get_dataset_k_folds
from RULES import Rules
import numpy as np


def analyze(file,folds=10):
    """
    Executes the main analysis of a Dataset using the rules algorithm.
    Reading the dataset from 'file' csv, executes a k-folds Accuracy analyisis,
    with k=folds. At the end it prints the rules generated by last fold and
    the mean metrics of accuracy and the mean percentage of non predicted
    instances (Instances which doesn't fits any rule).
    :param file: File where reading the dataset
    :param folds: K of the k-folds analysis. If -1 then a Leave One Out
    analysis will be performed.
    :return:
    Prints ruleset generated, mean validation accuracy, and mean non-predicted instances.
    """
    accuracy = []
    not_predicted = []

    # For each fold
    for i, (X_train, Y_train, X_val, Y_val, names) in enumerate(get_dataset_k_folds(file=file, k=folds)):
        # Fit a RULES algorithm with the trained fold
        rules = Rules().fit(X=X_train, Y=Y_train)
        # Predict values for the validation fold
        predicted = rules.predict(X=X_val)
        # Save which percentage of accuracy was not predicted
        non_predicted_Y = np.sum(predicted == '')
        not_predicted.append(100 * non_predicted_Y / len(Y_val))

        # Save the accuracy over the predicted data.
        if (len(Y_val) - non_predicted_Y) > 0:
            accuracy.append(100 * np.sum(Y_val == predicted) / (len(Y_val)-non_predicted_Y))
        else:
            accuracy.append(100)

        # Verbose each 20 folds
        if i % 20 == 0 and i>0:
            print(str(i)+ " Folds Done")
    print(str(i) + " Folds Excuted")
    # Print Results
    print("-"*50)
    print("Last model rules")
    print("-"*50)
    rules.print_rules(names=names)
    print("-"*50)
    print("Accuracy: " + str(np.round(np.mean(accuracy),1)) + "%")
    print("Non Predicted: " + str(np.round(np.mean(not_predicted), 1)) + "%")